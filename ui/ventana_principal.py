import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from typing import Dict, List

# Importar modelos
from modelos.tarea import Tarea
from modelos.linea_produccion import LineaProduccion

# Importar servicios
from servicios.balanceador_rpw import BalanceadorRPW
from servicios.calculadora_metricas import CalculadoraMetricas

# Importar componentes UI
from ui.componentes.panel_entrada import PanelEntradaDatos
from ui.componentes.panel_resultados import PanelResultados
from ui.componentes.panel_graficos import PanelGraficos

# Importar utilidades
from utils.estilos import EstilosModernos, COLORES, FUENTES, ESPACIADO, UtilsUI
from utils.validacion import ValidacionError


class VentanaPrincipal:
    """
    Ventana principal de la aplicaci√≥n de balanceamiento de l√≠neas RPW.
    Coordina todos los componentes y maneja la l√≥gica principal.
    """
    
    def __init__(self):
        try:
            self.root = tk.Tk()
            self.linea_produccion = None
            self.balanceador = None
            self.calculadora_metricas = None

            # Componentes UI - inicializar como None
            self.panel_entrada = None
            self.panel_resultados = None
            self.panel_graficos = None

            # Variables de estado - inicializar
            self.datos_balanceados = False
            self.progreso_var = None
            self.label_estado = None

            # Variables para an√°lisis comparativo
            self.tree_eficiencia = None
            self.text_temporal = None
            self.kpi_vars = {}

            self._configurar_ventana()
            self._crear_interfaz()
            self._configurar_eventos()

        except Exception as e:
            # Manejo seguro de errores durante inicializaci√≥n
            if hasattr(self, 'root'):
                try:
                    messagebox.showerror("Error de Inicializaci√≥n",
                                       f"Error al inicializar la aplicaci√≥n:\n\n{str(e)}")
                except:
                    pass
            raise e
    
    def _configurar_ventana(self):
        """Configura la ventana principal."""
        # Configurar propiedades b√°sicas
        self.root.title("Calculadora de Balanceo de L√≠neas - Algoritmo RPW")
        self.root.state('zoomed')  # Maximizar en Windows
        
        # Intentar maximizar en otros OS
        try:
            self.root.attributes('-zoomed', True)  # Linux
        except:
            try:
                self.root.attributes('-fullscreen', False)  # macOS
                UtilsUI.centrar_ventana(self.root, 1400, 900)
            except:
                UtilsUI.centrar_ventana(self.root, 1400, 900)
        
        # Configurar √≠cono (si existe)
        try:
            self.root.iconbitmap('assets/icon.ico')
        except:
            pass  # Continuar sin √≠cono si no existe
        
        # Configurar colores de fondo
        self.root.configure(bg=COLORES['fondo'])
        
        # Configurar tema moderno
        EstilosModernos.configurar_tema_principal()
        
        # Configurar protocolo de cierre
        self.root.protocol("WM_DELETE_WINDOW", self._on_cerrar_aplicacion)
    
    def _crear_interfaz(self):
        """Crea la interfaz principal."""
        # Frame principal
        main_frame = ttk.Frame(self.root, style='Fondo.TFrame', padding=ESPACIADO['normal'])
        main_frame.pack(fill='both', expand=True)
        
        # Crear barra de t√≠tulo personalizada
        self._crear_barra_titulo(main_frame)
        
        # Crear barra de herramientas
        self._crear_barra_herramientas(main_frame)
        
        # Crear √°rea principal con paneles
        self._crear_area_principal(main_frame)
        
        # Crear barra de estado
        self._crear_barra_estado(main_frame)
    
    def _crear_barra_titulo(self, parent):
        """Crea la barra de t√≠tulo con informaci√≥n de la aplicaci√≥n."""
        frame_titulo = ttk.Frame(parent, style='Superficie.TFrame', padding=ESPACIADO['normal'])
        frame_titulo.pack(fill='x', pady=(0, ESPACIADO['normal']))
        
        # T√≠tulo principal
        titulo_principal = ttk.Label(frame_titulo, 
                                   text="üè≠ Calculadora de Balanceo de L√≠neas de Producci√≥n", 
                                   style='Titulo.TLabel')
        titulo_principal.pack(side='left')
        
        # Informaci√≥n del algoritmo
        info_algoritmo = ttk.Label(frame_titulo, 
                                 text="Algoritmo: Ranked Positional Weight (RPW)", 
                                 style='Secundario.TLabel')
        info_algoritmo.pack(side='right')
        
        # Separador
        separador = EstilosModernos.crear_separador_horizontal(frame_titulo)
        separador.pack(fill='x', pady=(ESPACIADO['pequeno'], 0))
    
    def _crear_barra_herramientas(self, parent):
        """Crea la barra de herramientas con botones principales."""
        frame_herramientas = ttk.Frame(parent, style='Superficie.TFrame', padding=ESPACIADO['normal'])
        frame_herramientas.pack(fill='x', pady=(0, ESPACIADO['normal']))
        
        # Grupo de botones principales
        frame_principales = ttk.Frame(frame_herramientas)
        frame_principales.pack(side='left')
        
        # Bot√≥n de balancear (principal)
        self.btn_balancear = ttk.Button(frame_principales, 
                                       text="‚öñÔ∏è Ejecutar Balanceamiento",
                                       style='Primario.TButton',
                                       command=self._ejecutar_balanceamiento)
        self.btn_balancear.pack(side='left', padx=(0, 10))
        
        # Bot√≥n de limpiar
        self.btn_limpiar = ttk.Button(frame_principales,
                                     text="üßπ Limpiar Resultados",
                                     style='Secundario.TButton',
                                     command=self._limpiar_resultados)
        self.btn_limpiar.pack(side='left', padx=(0, 10))
        
        # Grupo de botones de archivo
        frame_archivo = ttk.Frame(frame_herramientas)
        frame_archivo.pack(side='right')
        
        # Bot√≥n de exportar
        self.btn_exportar = ttk.Button(frame_archivo,
                                      text="üíæ Exportar Resultados",
                                      style='Acento.TButton',
                                      command=self._exportar_resultados)
        self.btn_exportar.pack(side='left', padx=(10, 0))
        
        # Bot√≥n de ayuda
        self.btn_ayuda = ttk.Button(frame_archivo,
                                   text="‚ùì Ayuda",
                                   style='Acento.TButton',
                                   command=self._mostrar_ayuda)
        self.btn_ayuda.pack(side='left', padx=(10, 0))
        
        # Separador
        separador = EstilosModernos.crear_separador_horizontal(frame_herramientas)
        separador.pack(fill='x', pady=(ESPACIADO['pequeno'], 0))
    
    def _crear_area_principal(self, parent):
        """Crea el √°rea principal con los paneles organizados en pesta√±as."""
        # Crear notebook principal para las pesta√±as
        self.notebook_principal = ttk.Notebook(parent)
        self.notebook_principal.pack(fill='both', expand=True, padx=ESPACIADO['normal'])

        # Pesta√±a 1: Configuraci√≥n y Entrada de Datos
        self._crear_pestana_configuracion()

        # Pesta√±a 2: Resultados y An√°lisis Comparativo
        self._crear_pestana_resultados()

        # Pesta√±a 3: M√©tricas y Visualizaciones
        self._crear_pestana_metricas()
    
    def _crear_pestana_configuracion(self):
        """Crea la pesta√±a de configuraci√≥n y entrada de datos."""
        frame_config = ttk.Frame(self.notebook_principal, style='Fondo.TFrame')
        self.notebook_principal.add(frame_config, text="üìã Configuraci√≥n de Datos")

        # Panel de entrada de datos ocupa toda la pesta√±a
        self.panel_entrada = PanelEntradaDatos(frame_config, callback_datos_actualizados=self._on_datos_actualizados)

    def _crear_pestana_resultados(self):
        """Crea la pesta√±a de resultados con an√°lisis comparativo."""
        frame_resultados = ttk.Frame(self.notebook_principal, style='Fondo.TFrame')
        self.notebook_principal.add(frame_resultados, text="üìä Resultados y An√°lisis")

        # Dividir en dos secciones verticales
        # Secci√≥n superior: Resultados del balanceamiento
        frame_superior = ttk.LabelFrame(frame_resultados, text="Resultados del Balanceamiento",
                                       style='Card.TLabelframe', padding=ESPACIADO['normal'])
        frame_superior.pack(fill='both', expand=True, padx=ESPACIADO['normal'],
                           pady=(ESPACIADO['normal'], ESPACIADO['pequeno']))

        # Secci√≥n inferior: An√°lisis comparativo
        frame_inferior = ttk.LabelFrame(frame_resultados, text="An√°lisis Comparativo",
                                       style='Card.TLabelframe', padding=ESPACIADO['normal'])
        frame_inferior.pack(fill='both', expand=True, padx=ESPACIADO['normal'],
                           pady=(ESPACIADO['pequeno'], ESPACIADO['normal']))

        # Crear panel de resultados en la secci√≥n superior
        self.panel_resultados = PanelResultados(frame_superior)

        # Crear panel de an√°lisis comparativo en la secci√≥n inferior
        self._crear_panel_analisis_comparativo(frame_inferior)

    def _crear_pestana_metricas(self):
        """Crea la pesta√±a de m√©tricas con visualizaciones."""
        frame_metricas = ttk.Frame(self.notebook_principal, style='Fondo.TFrame')
        self.notebook_principal.add(frame_metricas, text="üìà M√©tricas Visuales")

        # Panel de gr√°ficos y m√©tricas visuales ocupa toda la pesta√±a
        self.panel_graficos = PanelGraficos(frame_metricas)

    def _crear_panel_analisis_comparativo(self, parent):
        """Crea el panel de an√°lisis comparativo."""
        # Crear notebook interno para diferentes tipos de an√°lisis
        notebook_analisis = ttk.Notebook(parent)
        notebook_analisis.pack(fill='both', expand=True)

        # Sub-pesta√±a: Eficiencia por estaci√≥n
        frame_eficiencia = ttk.Frame(notebook_analisis)
        notebook_analisis.add(frame_eficiencia, text="Eficiencia por Estaci√≥n")

        # Sub-pesta√±a: Comparaci√≥n temporal
        frame_temporal = ttk.Frame(notebook_analisis)
        notebook_analisis.add(frame_temporal, text="An√°lisis Temporal")

        # Sub-pesta√±a: Indicadores clave
        frame_kpi = ttk.Frame(notebook_analisis)
        notebook_analisis.add(frame_kpi, text="Indicadores Clave (KPI)")

        # Inicializar contenido de an√°lisis comparativo
        self._inicializar_analisis_eficiencia(frame_eficiencia)
        self._inicializar_analisis_temporal(frame_temporal)
        self._inicializar_indicadores_kpi(frame_kpi)

    def _inicializar_analisis_eficiencia(self, parent):
        """Inicializa el an√°lisis de eficiencia por estaci√≥n."""
        # Crear tabla de eficiencia por estaci√≥n
        columns = ('Estaci√≥n', 'Tareas', 'Tiempo Total', 'Utilizaci√≥n %', 'Tiempo Ocioso', 'Estado')
        self.tree_eficiencia = ttk.Treeview(parent, columns=columns, show='headings', height=8)

        # Configurar encabezados
        self.tree_eficiencia.heading('Estaci√≥n', text='Estaci√≥n')
        self.tree_eficiencia.heading('Tareas', text='Tareas Asignadas')
        self.tree_eficiencia.heading('Tiempo Total', text='Tiempo Total (min)')
        self.tree_eficiencia.heading('Utilizaci√≥n %', text='Utilizaci√≥n %')
        self.tree_eficiencia.heading('Tiempo Ocioso', text='Tiempo Ocioso (min)')
        self.tree_eficiencia.heading('Estado', text='Estado')

        # Configurar anchos de columnas
        self.tree_eficiencia.column('Estaci√≥n', width=80)
        self.tree_eficiencia.column('Tareas', width=150)
        self.tree_eficiencia.column('Tiempo Total', width=120)
        self.tree_eficiencia.column('Utilizaci√≥n %', width=100)
        self.tree_eficiencia.column('Tiempo Ocioso', width=120)
        self.tree_eficiencia.column('Estado', width=100)

        # Scrollbar para la tabla
        scrollbar_ef = ttk.Scrollbar(parent, orient='vertical', command=self.tree_eficiencia.yview)
        self.tree_eficiencia.configure(yscrollcommand=scrollbar_ef.set)

        # Pack de componentes
        self.tree_eficiencia.pack(side='left', fill='both', expand=True)
        scrollbar_ef.pack(side='right', fill='y')

    def _inicializar_analisis_temporal(self, parent):
        """Inicializa el an√°lisis temporal."""
        # Label informativo
        info_label = ttk.Label(parent, text="üìä An√°lisis de tendencias temporales y evoluci√≥n de m√©tricas",
                              style='Subtitulo.TLabel')
        info_label.pack(pady=ESPACIADO['normal'])

        # Frame para m√©tricas temporales
        frame_metricas = ttk.Frame(parent)
        frame_metricas.pack(fill='both', expand=True, padx=ESPACIADO['normal'])

        # Crear text widget para mostrar an√°lisis temporal
        self.text_temporal = tk.Text(frame_metricas, height=10, wrap='word',
                                   font=FUENTES['normal'], state='disabled')
        scrollbar_temp = ttk.Scrollbar(frame_metricas, orient='vertical', command=self.text_temporal.yview)
        self.text_temporal.configure(yscrollcommand=scrollbar_temp.set)

        self.text_temporal.pack(side='left', fill='both', expand=True)
        scrollbar_temp.pack(side='right', fill='y')

    def _inicializar_indicadores_kpi(self, parent):
        """Inicializa los indicadores clave de rendimiento."""
        # Frame principal para KPIs
        frame_kpis = ttk.Frame(parent)
        frame_kpis.pack(fill='both', expand=True, padx=ESPACIADO['normal'], pady=ESPACIADO['normal'])

        # Crear grid de KPIs (2x3)
        self.kpi_vars = {}
        kpis = [
            ('eficiencia_linea', 'Eficiencia de L√≠nea', '%'),
            ('balance_suavidad', 'Balance de Suavidad', ''),
            ('tiempo_ocioso_total', 'Tiempo Ocioso Total', 'min'),
            ('estaciones_optimas', 'Desviaci√≥n vs √ìptimo', 'estaciones'),
            ('capacidad_produccion', 'Capacidad de Producci√≥n', 'und/d√≠a'),
            ('indice_productividad', '√çndice de Productividad', '')
        ]

        for i, (key, nombre, unidad) in enumerate(kpis):
            row = i // 2
            col = i % 2

            # Frame para cada KPI
            kpi_frame = ttk.LabelFrame(frame_kpis, text=nombre, padding=ESPACIADO['normal'])
            kpi_frame.grid(row=row, column=col, padx=ESPACIADO['normal'], pady=ESPACIADO['normal'],
                          sticky='ew')

            # Variable para el valor
            var = tk.StringVar(value="--")
            self.kpi_vars[key] = var

            # Label para el valor
            valor_label = ttk.Label(kpi_frame, textvariable=var, style='Titulo.TLabel')
            valor_label.pack()

            # Label para la unidad
            if unidad:
                unidad_label = ttk.Label(kpi_frame, text=unidad, style='Secundario.TLabel')
                unidad_label.pack()

        # Configurar peso de las columnas
        frame_kpis.grid_columnconfigure(0, weight=1)
        frame_kpis.grid_columnconfigure(1, weight=1)

    def _actualizar_analisis_comparativo(self, estaciones, metricas):
        """Actualiza los datos del an√°lisis comparativo."""
        # Actualizar an√°lisis de eficiencia por estaci√≥n
        self._actualizar_eficiencia_estaciones(estaciones)

        # Actualizar an√°lisis temporal
        self._actualizar_analisis_temporal(metricas)

        # Actualizar KPIs
        self._actualizar_kpis(metricas)

    def _actualizar_eficiencia_estaciones(self, estaciones):
        """Actualiza la tabla de eficiencia por estaci√≥n."""
        # Limpiar tabla existente
        for item in self.tree_eficiencia.get_children():
            self.tree_eficiencia.delete(item)

        # Agregar datos de cada estaci√≥n
        for estacion in estaciones:
            utilizacion = estacion.calcular_utilizacion()
            tiempo_ocioso = estacion.obtener_tiempo_ocioso()
            tareas_texto = ", ".join(estacion.obtener_ids_tareas())

            # Determinar estado basado en utilizaci√≥n
            if utilizacion >= 90:
                estado = "üî¥ Sobrecargada"
            elif utilizacion >= 75:
                estado = "üü° Alta"
            elif utilizacion >= 50:
                estado = "üü¢ √ìptima"
            else:
                estado = "üîµ Baja"

            # Insertar fila
            self.tree_eficiencia.insert('', 'end', values=(
                f"Estaci√≥n {estacion.numero}",
                tareas_texto,
                f"{estacion.tiempo_total:.2f}",
                f"{utilizacion:.1f}%",
                f"{tiempo_ocioso:.2f}",
                estado
            ))

    def _actualizar_analisis_temporal(self, metricas):
        """Actualiza el an√°lisis temporal."""
        # Generar texto de an√°lisis temporal
        eficiencia = metricas.get('metricas_eficiencia', {})
        basicas = metricas.get('metricas_basicas', {})

        texto_analisis = f"""
üìä AN√ÅLISIS TEMPORAL Y TENDENCIAS

‚è±Ô∏è  Tiempo de Ciclo: {basicas.get('tiempo_ciclo', 0):.2f} minutos
üéØ Demanda Objetivo: {basicas.get('demanda_diaria', 0)} unidades/d√≠a
üìà Eficiencia Alcanzada: {eficiencia.get('eficiencia_linea', 0):.1f}%

üîç EVALUACI√ìN DE RENDIMIENTO:
‚Ä¢ N√∫mero de estaciones utilizadas: {basicas.get('numero_estaciones', 0)}
‚Ä¢ Estaciones m√≠nimas te√≥ricas: {basicas.get('numero_estaciones_minimo_teorico', 0)}
‚Ä¢ Diferencia: +{basicas.get('numero_estaciones', 0) - basicas.get('numero_estaciones_minimo_teorico', 0)} estaciones

‚öñÔ∏è  BALANCE Y EQUILIBRIO:
‚Ä¢ √çndice de suavidad: {eficiencia.get('indice_suavidad', 0):.2f}
‚Ä¢ Tiempo ocioso total: {eficiencia.get('tiempo_ocioso_total', 0):.2f} minutos
‚Ä¢ Utilizaci√≥n promedio: {eficiencia.get('utilizacion_promedio', 0):.1f}%

üìã RECOMENDACIONES:
"""

        # Agregar recomendaciones basadas en m√©tricas
        if eficiencia.get('eficiencia_linea', 0) < 70:
            texto_analisis += "‚Ä¢ ‚ö†Ô∏è  Eficiencia baja - Considerar redistribuci√≥n de tareas\n"
        if eficiencia.get('indice_suavidad', 0) > 2.0:
            texto_analisis += "‚Ä¢ ‚ö†Ô∏è  Desbalance alto - Revisar asignaciones por tiempo\n"
        if basicas.get('numero_estaciones', 0) > basicas.get('numero_estaciones_minimo_teorico', 0) + 2:
            texto_analisis += "‚Ä¢ ‚ö†Ô∏è  Exceso de estaciones - Optimizaci√≥n posible\n"

        if eficiencia.get('eficiencia_linea', 0) >= 85:
            texto_analisis += "‚Ä¢ ‚úÖ Excelente eficiencia alcanzada\n"
        if eficiencia.get('indice_suavidad', 0) <= 1.0:
            texto_analisis += "‚Ä¢ ‚úÖ Buen balance entre estaciones\n"

        # Actualizar widget de texto
        self.text_temporal.configure(state='normal')
        self.text_temporal.delete('1.0', tk.END)
        self.text_temporal.insert('1.0', texto_analisis)
        self.text_temporal.configure(state='disabled')

    def _actualizar_kpis(self, metricas):
        """Actualiza los indicadores clave de rendimiento."""
        eficiencia = metricas.get('metricas_eficiencia', {})
        basicas = metricas.get('metricas_basicas', {})
        produccion = metricas.get('metricas_produccion', {})

        # Actualizar valores de KPIs
        self.kpi_vars['eficiencia_linea'].set(f"{eficiencia.get('eficiencia_linea', 0):.1f}")
        self.kpi_vars['balance_suavidad'].set(f"{eficiencia.get('indice_suavidad', 0):.2f}")
        self.kpi_vars['tiempo_ocioso_total'].set(f"{eficiencia.get('tiempo_ocioso_total', 0):.1f}")

        # Calcular desviaci√≥n vs √≥ptimo
        actual = basicas.get('numero_estaciones', 0)
        optimo = basicas.get('numero_estaciones_minimo_teorico', 0)
        desviacion = actual - optimo
        self.kpi_vars['estaciones_optimas'].set(f"+{desviacion}" if desviacion > 0 else f"{desviacion}")

        # Capacidad de producci√≥n
        capacidad = produccion.get('capacidad_maxima_diaria', basicas.get('demanda_diaria', 0))
        self.kpi_vars['capacidad_produccion'].set(f"{capacidad:.0f}")

        # √çndice de productividad (eficiencia normalizada)
        productividad = eficiencia.get('eficiencia_linea', 0) / 100
        self.kpi_vars['indice_productividad'].set(f"{productividad:.2f}")

    def _limpiar_analisis_comparativo(self):
        """Limpia los datos del an√°lisis comparativo."""
        # Limpiar tabla de eficiencia
        if hasattr(self, 'tree_eficiencia'):
            for item in self.tree_eficiencia.get_children():
                self.tree_eficiencia.delete(item)

        # Limpiar an√°lisis temporal
        if hasattr(self, 'text_temporal'):
            self.text_temporal.configure(state='normal')
            self.text_temporal.delete('1.0', tk.END)
            self.text_temporal.insert('1.0', "No hay datos de an√°lisis disponibles.\n\nEjecute el balanceamiento para ver el an√°lisis.")
            self.text_temporal.configure(state='disabled')

        # Resetear KPIs
        if hasattr(self, 'kpi_vars'):
            for var in self.kpi_vars.values():
                var.set("--")
    
    def _crear_barra_estado(self, parent):
        """Crea la barra de estado."""
        frame_estado = ttk.Frame(parent, style='Superficie.TFrame', padding=ESPACIADO['pequeno'])
        frame_estado.pack(fill='x', side='bottom')
        
        # Separador
        separador = EstilosModernos.crear_separador_horizontal(frame_estado)
        separador.pack(fill='x', pady=(0, ESPACIADO['pequeno']))
        
        # Label de estado
        self.label_estado = ttk.Label(frame_estado, 
                                     text="Listo - Configure los datos y ejecute el balanceamiento",
                                     style='Secundario.TLabel')
        self.label_estado.pack(side='left')
        
        # Barra de progreso
        self.progreso_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(frame_estado, 
                                           variable=self.progreso_var,
                                           maximum=100,
                                           length=200)
        self.progress_bar.pack(side='right', padx=(10, 0))
        
        # Label de progreso
        self.label_progreso = ttk.Label(frame_estado, text="", style='Secundario.TLabel')
        self.label_progreso.pack(side='right', padx=(10, 0))
    
    def _configurar_eventos(self):
        """Configura los eventos y atajos de teclado."""
        # Atajos de teclado
        self.root.bind('<Control-r>', lambda e: self._ejecutar_balanceamiento())
        self.root.bind('<Control-l>', lambda e: self._limpiar_resultados())
        self.root.bind('<Control-s>', lambda e: self._exportar_resultados())
        self.root.bind('<F1>', lambda e: self._mostrar_ayuda())
        self.root.bind('<Escape>', lambda e: self._on_cerrar_aplicacion())
        
        # Configurar tooltips
        EstilosModernos.crear_tooltip(self.btn_balancear, "Ctrl+R: Ejecutar balanceamiento con algoritmo RPW")
        EstilosModernos.crear_tooltip(self.btn_limpiar, "Ctrl+L: Limpiar todos los resultados")
        EstilosModernos.crear_tooltip(self.btn_exportar, "Ctrl+S: Exportar resultados a archivo")
        EstilosModernos.crear_tooltip(self.btn_ayuda, "F1: Mostrar ayuda y documentaci√≥n")
    
    def _on_datos_actualizados(self):
        """Callback cuando se actualizan los datos de entrada."""
        self.datos_balanceados = False
        self._actualizar_estado("Datos actualizados - Ejecute el balanceamiento para ver resultados")
    
    def _ejecutar_balanceamiento(self):
        """Ejecuta el algoritmo de balanceamiento RPW."""
        try:
            # Validar datos de entrada
            if not self._validar_datos_entrada():
                return
            
            # Actualizar estado
            self._actualizar_estado("Iniciando balanceamiento...")
            self.progreso_var.set(10)
            self.root.update()
            
            # Crear l√≠nea de producci√≥n
            self._crear_linea_produccion()
            self.progreso_var.set(30)
            self.root.update()
            
            # Ejecutar balanceamiento en hilo separado para no bloquear UI
            threading.Thread(target=self._ejecutar_balanceamiento_async, daemon=True).start()
            
        except Exception as e:
            self._manejar_error("Error al iniciar balanceamiento", str(e))
    
    def _ejecutar_balanceamiento_async(self):
        """Ejecuta el balanceamiento de forma as√≠ncrona."""
        try:
            # Crear balanceador
            self.balanceador = BalanceadorRPW(self.linea_produccion)
            
            # Actualizar progreso
            self.root.after(0, lambda: self.progreso_var.set(50))
            self.root.after(0, lambda: self._actualizar_estado("Calculando pesos posicionales..."))
            
            # Ejecutar balanceamiento
            estaciones, estadisticas = self.balanceador.balancear()
            
            # Actualizar progreso
            self.root.after(0, lambda: self.progreso_var.set(70))
            self.root.after(0, lambda: self._actualizar_estado("Calculando m√©tricas..."))
            
            # Calcular m√©tricas completas
            self.calculadora_metricas = CalculadoraMetricas(self.linea_produccion)
            metricas_completas = self.calculadora_metricas.calcular_todas_las_metricas()
            
            # Actualizar progreso
            self.root.after(0, lambda: self.progreso_var.set(90))
            self.root.after(0, lambda: self._actualizar_estado("Actualizando interfaz..."))
            
            # Actualizar UI en el hilo principal
            self.root.after(0, lambda: self._finalizar_balanceamiento(estaciones, metricas_completas))
            
        except Exception as e:
            self.root.after(0, lambda: self._manejar_error("Error durante balanceamiento", str(e)))
    
    def _finalizar_balanceamiento(self, estaciones, metricas):
        """Finaliza el balanceamiento y actualiza la UI."""
        try:
            # Actualizar paneles principales
            if hasattr(self, 'panel_resultados') and self.panel_resultados:
                self.panel_resultados.actualizar_resultados(estaciones, metricas)

            if hasattr(self, 'panel_graficos') and self.panel_graficos:
                self.panel_graficos.actualizar_graficos(estaciones, metricas)

            # Actualizar an√°lisis comparativo en la pesta√±a de resultados
            self._actualizar_analisis_comparativo(estaciones, metricas)

            # Marcar como balanceado
            self.datos_balanceados = True

            # Actualizar estado final
            num_estaciones = len(estaciones)
            eficiencia = metricas.get('metricas_eficiencia', {}).get('eficiencia_linea', 0)

            mensaje_final = f"‚úÖ Balanceamiento completado: {num_estaciones} estaciones, {eficiencia:.1f}% eficiencia"
            self._actualizar_estado(mensaje_final)

            # Completar barra de progreso
            self.progreso_var.set(100)

            # Cambiar autom√°ticamente a la pesta√±a de resultados
            if hasattr(self, 'notebook_principal'):
                self.notebook_principal.select(1)  # √çndice 1 = pesta√±a de resultados

            # Limpiar progreso despu√©s de un momento
            self.root.after(3000, lambda: self.progreso_var.set(0))

            # Mostrar resumen
            self._mostrar_resumen_balanceamiento(estaciones, metricas)
            
        except Exception as e:
            self._manejar_error("Error al finalizar balanceamiento", str(e))
    
    def _validar_datos_entrada(self) -> bool:
        """Valida que los datos de entrada sean correctos."""
        try:
            # Obtener datos
            datos_tareas = self.panel_entrada.obtener_datos_tareas()
            config_linea = self.panel_entrada.obtener_configuracion_linea()
            
            # Validaciones b√°sicas
            if not datos_tareas:
                messagebox.showerror("Error de Validaci√≥n", "Debe definir al menos una tarea")
                return False
            
            if config_linea['demanda_diaria'] <= 0:
                messagebox.showerror("Error de Validaci√≥n", "La demanda diaria debe ser mayor a 0")
                return False
            
            if config_linea['tiempo_disponible'] <= 0:
                messagebox.showerror("Error de Validaci√≥n", "El tiempo disponible debe ser mayor a 0")
                return False
            
            return True
            
        except Exception as e:
            messagebox.showerror("Error de Validaci√≥n", f"Error al validar datos: {str(e)}")
            return False
    
    def _crear_linea_produccion(self):
        """Crea la l√≠nea de producci√≥n con los datos ingresados."""
        # Obtener configuraci√≥n
        config = self.panel_entrada.obtener_configuracion_linea()
        
        # Crear l√≠nea de producci√≥n
        self.linea_produccion = LineaProduccion(
            demanda_diaria=config['demanda_diaria'],
            tiempo_disponible=config['tiempo_disponible']
        )
        
        # Agregar tareas
        datos_tareas = self.panel_entrada.obtener_datos_tareas()
        for datos in datos_tareas:
            tarea = Tarea(
                id=datos['id'],
                descripcion=datos['descripcion'],
                tiempo=datos['tiempo'],
                precedencias=datos.get('precedencias', [])
            )
            self.linea_produccion.agregar_tarea(tarea)

    def _limpiar_resultados(self):
        """Limpia todos los resultados y datos."""
        try:
            # Limpiar paneles solo si est√°n inicializados
            if hasattr(self, 'panel_resultados') and self.panel_resultados:
                self.panel_resultados.limpiar_resultados()
            if hasattr(self, 'panel_graficos') and self.panel_graficos:
                self.panel_graficos.limpiar_graficos()

            # Limpiar an√°lisis comparativo
            self._limpiar_analisis_comparativo()

            # Resetear estado
            self.datos_balanceados = False
            self.linea_produccion = None
            self.balanceador = None
            self.calculadora_metricas = None

            # Actualizar estado solo si est√° inicializado
            if hasattr(self, 'label_estado') and self.label_estado:
                self._actualizar_estado("Resultados limpiados - Configure nuevos datos")
            if hasattr(self, 'progreso_var') and self.progreso_var:
                self.progreso_var.set(0)

        except Exception as e:
            self._manejar_error_seguro("Error al limpiar resultados", str(e))

    def _exportar_resultados(self):
        """Exporta los resultados a un archivo."""
        try:
            if not self.datos_balanceados:
                messagebox.showwarning("Exportar Resultados",
                                     "No hay resultados para exportar. Ejecute el balanceamiento primero.")
                return

            # Solicitar archivo de destino
            archivo = filedialog.asksaveasfilename(
                title="Exportar Resultados",
                defaultextension=".txt",
                filetypes=[
                    ("Archivos de texto", "*.txt"),
                    ("Archivos CSV", "*.csv"),
                    ("Todos los archivos", "*.*")
                ]
            )

            if archivo:
                self._generar_reporte_exportacion(archivo)
                messagebox.showinfo("Exportar Resultados",
                                  f"Resultados exportados exitosamente a:\n{archivo}")

        except Exception as e:
            self._manejar_error("Error al exportar resultados", str(e))

    def _generar_reporte_exportacion(self, archivo: str):
        """Genera el reporte de exportaci√≥n."""
        try:
            with open(archivo, 'w', encoding='utf-8') as f:
                f.write("REPORTE DE BALANCEAMIENTO DE L√çNEA - ALGORITMO RPW\n")
                f.write("=" * 60 + "\n\n")

                # Informaci√≥n general
                f.write("CONFIGURACI√ìN DE LA L√çNEA:\n")
                f.write(f"Demanda diaria: {self.linea_produccion.demanda_diaria} unidades\n")
                f.write(f"Tiempo disponible: {self.linea_produccion.tiempo_disponible} minutos\n")
                f.write(f"Tiempo de ciclo: {self.linea_produccion.obtener_tiempo_ciclo():.2f} minutos\n\n")

                # Estaciones y asignaciones
                f.write("ESTACIONES Y ASIGNACIONES:\n")
                for estacion in self.linea_produccion.estaciones:
                    f.write(f"Estaci√≥n {estacion.numero}:\n")
                    f.write(f"  Tareas: {', '.join(estacion.obtener_ids_tareas())}\n")
                    f.write(f"  Tiempo total: {estacion.tiempo_total:.2f} min\n")
                    f.write(f"  Utilizaci√≥n: {estacion.calcular_utilizacion():.1f}%\n")
                    f.write(f"  Tiempo ocioso: {estacion.obtener_tiempo_ocioso():.2f} min\n\n")

                # M√©tricas
                if self.calculadora_metricas:
                    metricas = self.calculadora_metricas.calcular_todas_las_metricas()
                    f.write("M√âTRICAS DE EFICIENCIA:\n")
                    eficiencia = metricas.get('metricas_eficiencia', {})
                    f.write(f"Eficiencia de l√≠nea: {eficiencia.get('eficiencia_linea', 0):.1f}%\n")
                    f.write(f"Balance de suavidad: {eficiencia.get('indice_suavidad', 0):.2f}\n")
                    f.write(f"Tiempo ocioso total: {eficiencia.get('tiempo_ocioso_total', 0):.2f} min\n")

        except Exception as e:
            raise Exception(f"Error al escribir archivo: {str(e)}")

    def _mostrar_ayuda(self):
        """Muestra la ventana de ayuda."""
        try:
            ventana_ayuda = tk.Toplevel(self.root)
            ventana_ayuda.title("Ayuda - Calculadora RPW")
            ventana_ayuda.geometry("800x600")
            ventana_ayuda.configure(bg=COLORES['fondo'])

            # Contenido de ayuda
            texto_ayuda = """
CALCULADORA DE BALANCEAMIENTO DE L√çNEAS - ALGORITMO RPW

¬øQu√© es el algoritmo RPW?
El algoritmo Ranked Positional Weight (RPW) es un m√©todo heur√≠stico para
balancear l√≠neas de producci√≥n. Asigna tareas a estaciones de trabajo
minimizando el n√∫mero de estaciones necesarias.

C√≥mo usar la aplicaci√≥n:
1. Configure la demanda diaria y tiempo disponible
2. Agregue tareas con sus tiempos y precedencias
3. Ejecute el balanceamiento (Ctrl+R)
4. Analice los resultados y gr√°ficos
5. Exporte los resultados si es necesario

Atajos de teclado:
- Ctrl+R: Ejecutar balanceamiento
- Ctrl+L: Limpiar resultados
- Ctrl+S: Exportar resultados
- F1: Mostrar esta ayuda
- Esc: Cerrar aplicaci√≥n

M√©tricas importantes:
- Eficiencia de l√≠nea: % de utilizaci√≥n promedio de las estaciones
- Tiempo de ciclo: Tiempo m√°ximo disponible por estaci√≥n
- Balance de suavidad: Medida de equilibrio entre estaciones
            """

            # Widget de texto con scroll
            frame_texto = ttk.Frame(ventana_ayuda, padding=20)
            frame_texto.pack(fill='both', expand=True)

            text_widget = tk.Text(frame_texto,
                                wrap='word',
                                font=FUENTES['normal'],
                                bg=COLORES['superficie'],
                                fg=COLORES['texto_primario'])
            scrollbar = ttk.Scrollbar(frame_texto, orient='vertical', command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)

            text_widget.pack(side='left', fill='both', expand=True)
            scrollbar.pack(side='right', fill='y')

            text_widget.insert('1.0', texto_ayuda)
            text_widget.configure(state='disabled')

            # Bot√≥n cerrar
            btn_cerrar = ttk.Button(ventana_ayuda,
                                  text="Cerrar",
                                  command=ventana_ayuda.destroy)
            btn_cerrar.pack(pady=10)

        except Exception as e:
            self._manejar_error("Error al mostrar ayuda", str(e))

    def _mostrar_resumen_balanceamiento(self, estaciones, metricas):
        """Muestra un resumen del balanceamiento realizado."""
        try:
            eficiencia = metricas.get('metricas_eficiencia', {}).get('eficiencia_linea', 0)
            num_estaciones = len(estaciones)

            mensaje = f"""
‚úÖ BALANCEAMIENTO COMPLETADO

üìä Resultados:
‚Ä¢ N√∫mero de estaciones: {num_estaciones}
‚Ä¢ Eficiencia de l√≠nea: {eficiencia:.1f}%
‚Ä¢ Tiempo de ciclo: {self.linea_produccion.obtener_tiempo_ciclo():.2f} min

üí° Los resultados se muestran en los paneles de la derecha.
Puede exportar el reporte completo usando Ctrl+S.
            """

            messagebox.showinfo("Balanceamiento Completado", mensaje)

        except Exception as e:
            print(f"Error al mostrar resumen: {e}")  # Log sin mostrar al usuario

    def _actualizar_estado(self, mensaje: str):
        """Actualiza el mensaje de estado."""
        self.label_estado.configure(text=mensaje)
        self.root.update_idletasks()

    def _manejar_error(self, titulo: str, mensaje: str):
        """Maneja errores de la aplicaci√≥n."""
        if hasattr(self, 'progreso_var') and self.progreso_var:
            self.progreso_var.set(0)
        if hasattr(self, 'label_estado') and self.label_estado:
            self._actualizar_estado(f"‚ùå Error: {mensaje}")
        messagebox.showerror(titulo, f"Ha ocurrido un error:\n\n{mensaje}")

    def _manejar_error_seguro(self, titulo: str, mensaje: str):
        """Maneja errores de forma segura, incluso si la UI no est√° completamente inicializada."""
        try:
            # Intentar usar el manejo normal de errores
            if hasattr(self, 'progreso_var') and self.progreso_var:
                self.progreso_var.set(0)
            if hasattr(self, 'label_estado') and self.label_estado:
                self._actualizar_estado(f"‚ùå Error: {mensaje}")

            # Mostrar mensaje de error
            if hasattr(self, 'root') and self.root:
                messagebox.showerror(titulo, f"Ha ocurrido un error:\n\n{mensaje}")
            else:
                print(f"ERROR: {titulo} - {mensaje}")
        except Exception:
            # Si todo falla, al menos imprimir el error
            print(f"ERROR CR√çTICO: {titulo} - {mensaje}")

    def _on_cerrar_aplicacion(self):
        """Maneja el cierre de la aplicaci√≥n."""
        try:
            if messagebox.askokcancel("Salir", "¬øEst√° seguro que desea cerrar la aplicaci√≥n?"):
                self.root.quit()
                self.root.destroy()
        except:
            self.root.quit()

    def ejecutar(self):
        """Ejecuta la aplicaci√≥n."""
        try:
            self.root.mainloop()
        except Exception as e:
            print(f"Error cr√≠tico en la aplicaci√≥n: {e}")
            messagebox.showerror("Error Cr√≠tico",
                               f"Error cr√≠tico en la aplicaci√≥n:\n{e}")


if __name__ == "__main__":
    app = VentanaPrincipal()
    app.ejecutar()